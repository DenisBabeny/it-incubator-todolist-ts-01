{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","title","setTitle","error","setError","tasksItems","tasks","length","map","task","key","id","className","isDone","type","checked","onChange","e","changeStatus","currentTarget","todolistId","onClick","removeTask","addTask","trimmedTitle","trim","handlerCreator","filter","changeFilter","UserMessage","style","color","removeTodolist","value","onKeyDown","App","todolistId_1","v1","todolistId_2","todolist","setTodolist","setTasks","taskId","t","taskID","tl","todoListComponents","tasksForTodolist","getTaskForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0052a677.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype TodoListPropsType = {\r\n    todolistId: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todolistId: string) => void\r\n    changeFilter: (filter: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeStatus: (taskID: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n}\r\nconst TodoList = (props: TodoListPropsType) => {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n    const tasksItems = props.tasks.length\r\n        ? props.tasks.map(task => {\r\n            return (\r\n                <li key={task.id} className={task.isDone ? \"isDone\" : \"\"}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={task.isDone}\r\n                        onChange={(e) => props.changeStatus(task.id, e.currentTarget.checked, props.todolistId)}/>\r\n                    <span>{task.title}</span>\r\n                    <button onClick={() => props.removeTask(task.id, props.todolistId)}>delete</button>\r\n                </li>\r\n            )\r\n        })\r\n        : <span>Task list is empty</span>\r\n    const addTask = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addTask(trimmedTitle, props.todolistId)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    }\r\n    const handlerCreator = (filter: FilterValuesType) => {\r\n        return () => props.changeFilter(filter, props.todolistId)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error) setError(false)\r\n        setTitle(e.currentTarget.value)\r\n    }// обработка событий\r\n    const onKeyDownAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask()\r\n        }\r\n    }//обработка событий\r\n    const UserMessage =\r\n        error ?\r\n            <div style={{color: 'hotpink'}}> title is required!</div>\r\n            : <div>please, create list item</div>\r\n    return (\r\n        <div>\r\n            <h3>\r\n                {props.title}\r\n            <button onClick={()=>props.removeTodolist(props.todolistId)}>delete Todolist</button>\r\n            </h3>\r\n            <div>\r\n                <input\r\n                    className={error ? 'error' : ''}\r\n                    value={title}\r\n                    onChange={changeTitle}\r\n                    onKeyDown={onKeyDownAddTask}\r\n\r\n                />\r\n                <button onClick={addTask}>+</button>\r\n                {UserMessage}\r\n            </div>\r\n            <ul>\r\n                {tasksItems}\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === 'all' ? \"btn-active btn\" : 'btn'}\r\n                        onClick={handlerCreator('all')}>All\r\n                </button>\r\n                <button className={props.filter === 'active' ? \"btn-active btn\" : 'btn'}\r\n                        onClick={handlerCreator('active')}>Active\r\n                </button>\r\n                <button className={props.filter === 'completed' ? \"btn-active btn\" : 'btn'}\r\n                        onClick={handlerCreator('completed')}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\n\r\n//CLI\r\n//CUI => CRUD\r\n// Bll\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n    [todoListId: string]: Array<TaskType> // [ [todoListId:string] - это ключ\r\n}\r\n\r\nfunction App() {\r\n//BLL:\r\n//     const todoListTitle: string = \"What to lear today\"\r\n//     let [tasks, setTasks] = useState<Array<TaskType>>([\r\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n//         {id: v1(), title: \"JS\", isDone: true},///=> false {...t, isDone:false}\r\n//         {id: v1(), title: \"React\", isDone: false},\r\n//     ])\r\n//     const [filter, setFilter] = useState<FilterValuesType>('all')\r\n\r\n    //\r\n    const todolistId_1 = v1()\r\n    const todolistId_2 = v1()\r\n\r\n    const [todolist, setTodolist] = useState<Array<TodolistType>>([\r\n        {id: todolistId_1, title: \"What to lear today\", filter: 'all'},\r\n        {id: todolistId_2, title: \"What to bye\", filter: 'all'}\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},///=> false {...t, isDone:false}\r\n            {id: v1(), title: \"React\", isDone: false}\r\n        ],\r\n        [todolistId_2]: [\r\n            {id: v1(), title: \"beer\", isDone: true},\r\n            {id: v1(), title: \"meat\", isDone: true},\r\n            {id: v1(), title: \"fish\", isDone: false}\r\n        ]\r\n    })\r\n\r\n\r\n    const removeTask = (taskId: string, todolistId: string) => {\r\n//         const todoListTasks = tasks[todolistId]\r\n//         const updatedTasks = todoListTasks.filter(t=>t.id !== taskId)\r\n// const copyTask = {...tasks}\r\n//         copyTask[todolistId] =updatedTasks\r\n//         setTasks(copyTask)// пример расписанный подробно\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].filter(t => t.id !== taskId)})\r\n    }\r\n    const addTask = (title: string, todolistId: string) => {\r\n        // const newTask:TaskType = {id:v1(), title:title, isDone: false}\r\n        // const todoListTasks = tasks[todolistId]\r\n        // const updatedTask = [newTask, ...todoListTasks]\r\n        // const copyTask = {...tasks}\r\n        // copyTask[todolistId] = updatedTask\r\n        // setTasks(copyTask)\r\n        setTasks({\r\n            ...tasks,\r\n            [todolistId]: [{id: v1(), title: title, isDone: false}, ...tasks[todolistId]],\r\n        })\r\n    }\r\n\r\n    const changeStatus = (taskID: string, isDone: boolean, todolistId: string) => {\r\n        // const todoListTasks = tasks[todolistId]\r\n        // const updatedTask = todoListTasks.map(t=>t.id === taskID?{...t, isDone:isDone}:t)\r\n        // const copyTask = {...tasks}\r\n        // copyTask[todolistId] = updatedTask\r\n        // setTasks(copyTask)\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(t => t.id === taskID ? {...t, isDone: isDone} : t)})\r\n    }\r\n    const changeFilter = (filter: FilterValuesType, todolistId: string) => {\r\n        setTodolist(todolist.map(tl => tl.id === todolistId ? {...tl, filter: filter} : tl))\r\n    }\r\n    const removeTodolist = (todolistId: string) => {\r\n        setTodolist(todolist.filter(tl => tl.id !== todolistId))\r\n    }\r\n//UI:\r\n    const getTaskForTodolist = (todolist: TodolistType, tasks: TasksStateType) => {\r\n        switch (todolist.filter) {\r\n            case \"active\":\r\n                return tasks[todolist.id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return tasks[todolist.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[todolist.id]\r\n        }\r\n    }\r\n    const todoListComponents = todolist.map(tl => {\r\n        const tasksForTodolist = getTaskForTodolist(tl, tasks)\r\n        return (\r\n            <TodoList\r\n                key={tl.id}\r\n                todolistId={tl.id}\r\n                filter={tl.filter}\r\n                title={tl.title}\r\n                tasks={tasksForTodolist}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeStatus={changeStatus}\r\n                removeTodolist={removeTodolist}\r\n            />\r\n        )\r\n    })\r\n    return (\r\n        <div className=\"App\">\r\n            {todoListComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}